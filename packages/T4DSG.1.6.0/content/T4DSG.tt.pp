<#
// T4DSG Version 1.6.0
// https://nuget.org/packages/T4DSG
//
// Author Ivaylo Gochkov
//
#>
<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.XML" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data.SqlClient" #>
<#
// To debug uncomment those lines:
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();

ExeConfigurationFileMap configFile = new ExeConfigurationFileMap();
configFile.ExeConfigFilename = GetConfigFile();
var config = ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
string ConnectionString = config.ConnectionStrings.ConnectionStrings["t4dsg"].ConnectionString;
string RootNamespace = "$rootnamespace$";
string Namespace = RootNamespace;

if (!string.IsNullOrEmpty(ConnectionString)) {
	 Namespace += "." + GetDatabaseName(ConnectionString);
}
#>
// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.
// Instead, make changes to the .tt file (i.e. the T4 template) and save it to regenerate this file.

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #> 
{
<# 
if (!string.IsNullOrEmpty(ConnectionString)) 
{
    SqlConnection connection = new SqlConnection(ConnectionString);
	connection.Open();
	
	string queryTables = @"
		SELECT T.TABLE_SCHEMA AS [SchemaName], 
		T.TABLE_NAME AS [ObjectName], 
		C.COLUMN_NAME AS [Name], 
		C.IS_NULLABLE AS [IsNullable], 
		C.DATA_TYPE AS [Type], 
		C.CHARACTER_MAXIMUM_LENGTH AS [Length], 
		TC.CONSTRAINT_TYPE AS [PK]
		FROM INFORMATION_SCHEMA.TABLES T
		INNER JOIN INFORMATION_SCHEMA.COLUMNS C ON C.TABLE_SCHEMA = T.TABLE_SCHEMA AND C.TABLE_NAME = T.TABLE_NAME
		LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE K ON K.TABLE_SCHEMA = T.TABLE_SCHEMA AND K.TABLE_NAME = T.TABLE_NAME AND K.COLUMN_NAME = C.COLUMN_NAME
		LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC ON TC.CONSTRAINT_NAME = K.CONSTRAINT_NAME AND TC.CONSTRAINT_TYPE = 'PRIMARY KEY'
		WHERE T.TABLE_TYPE = 'BASE TABLE'
		ORDER BY T.TABLE_SCHEMA, T.TABLE_NAME, C.ORDINAL_POSITION";
	
    SqlDataAdapter adapterTables = new SqlDataAdapter(queryTables, connection);
	DataTable metaDataTables = new DataTable();
    adapterTables.Fill(metaDataTables);

	string queryStoredProcedures = @"
		SELECT S.Name AS [SchemaName], O.Name AS [ObjectName], P.[Name] AS [Name]
		FROM sys.schemas S
		INNER JOIN sys.objects O ON S.[schema_id]=O.[schema_id]
		LEFT JOIN sys.parameters P ON O.[object_id]=P.[object_id]
		WHERE O.[type]='P'
		ORDER BY S.[Name], O.Name, P.[Name]";

	SqlDataAdapter adapterStoredProcedures = new SqlDataAdapter(queryStoredProcedures, connection);
	DataTable metaDataStoredProcedures = new DataTable();
	adapterStoredProcedures.Fill(metaDataStoredProcedures);

	string queryFunctions = @"
		SELECT S.Name AS [SchemaName], O.Name AS [ObjectName], P.[Name] AS [Name]
		FROM sys.schemas S
		INNER JOIN sys.objects O ON S.[schema_id]=O.[schema_id]
		LEFT JOIN sys.parameters P ON O.[object_id]=P.[object_id]
		WHERE O.[type] in ('FN', 'IF', 'TF')
		ORDER BY S.[Name], O.Name, P.[Name]";

	SqlDataAdapter adapterFunctions = new SqlDataAdapter(queryFunctions, connection);
	DataTable metaDataFunctions = new DataTable();
	adapterFunctions.Fill(metaDataFunctions);

	string queryViews = @"
		SELECT S.Name AS [SchemaName], V.Name AS [ObjectName], C.[Name] AS [Name]
		FROM sys.schemas S
		INNER JOIN sys.views V ON S.[schema_id]=V.[schema_id]
		INNER JOIN sys.columns C ON V.[object_id]=C.[object_id]
		ORDER BY S.Name, V.Name, C.[Name]";

	SqlDataAdapter adapterViews = new SqlDataAdapter(queryViews, connection);
	DataTable metaDataViews = new DataTable();
	adapterViews.Fill(metaDataViews);
	
    var schemaNames = (from r in metaDataTables.Rows.OfType<DataRow>()
					   select r["SchemaName"].ToString())
				.Union(from r in metaDataStoredProcedures.Rows.OfType<DataRow>()
					   select r["SchemaName"].ToString())
				.Union(from r in metaDataFunctions.Rows.OfType<DataRow>()
					   select r["SchemaName"].ToString())
				.Union(from r in metaDataViews.Rows.OfType<DataRow>()
					   select r["SchemaName"].ToString())
				.Distinct();

	if (schemaNames.Count() > 0)
    {
		PushIndent("\t");
   		WriteLine("/// <summary>");
		WriteLine("/// Security schemas");
		WriteLine("/// </summary>");
		WriteLine("public static class SchemaNames");
		WriteLine("{");
		PushIndent("\t");

		foreach (string schemaName in schemaNames)
		{
			WriteLine("/// <summary>");
			WriteLine("/// Schema [" + schemaName + "]");
			WriteLine("/// </summary>");
			WriteLine("public static string " + schemaName + " = \"" + schemaName + "\";");
		}
	
		PopIndent();
		WriteLine("}"); // end SchemaNames
		WriteLine("");

		foreach (string schemaName in schemaNames)
		{
			WriteLine("/// <summary>");
			WriteLine("/// Schema [" + schemaName + "]");
			WriteLine("/// </summary>");
			WriteLine("public static class " + schemaName);
			WriteLine("{");
			PushIndent("\t");
	
			GenerateDatabaseObject(schemaName, "Table", metaDataTables);
			GenerateDatabaseObject(schemaName, "StoredProcedure", metaDataStoredProcedures);
			GenerateDatabaseObject(schemaName, "Function", metaDataFunctions);
			GenerateDatabaseObject(schemaName, "View", metaDataViews);

			PopIndent();
			WriteLine("}"); // end schema class
			WriteLine("");
		}
	}
#>
<# if (!string.IsNullOrEmpty(Namespace)) { PopIndent(); } 
}
else {
#>
// The connection string is empty.
// Specify the "t4dsg" connection string to your database in the project's app.config or web.config file.
// Example:
// <connectionStrings>
//   <add name="t4dsg" connectionString="Data Source=MyDataSource; Initial Catalog=MyDatabase; Integrated Security=SSPI;" />
// </connectionStrings>
<#}#>
}
<#}#>

<#+  
void GenerateDatabaseObject(string schemaName, string objectType, DataTable metaData) 
{
	var objectNames = (from r in metaData.Rows.OfType<DataRow>()
					   where r["SchemaName"].ToString() == schemaName
					   select r["ObjectName"].ToString()).Distinct();

	if (objectNames.Count() > 0) 
	{
		WriteLine("/// <summary>");
		WriteLine("/// " + objectType + " names in [" + schemaName + "] schema.");
		WriteLine("/// </summary>");
		WriteLine("public static class " + objectType + "Names");
		WriteLine("{");
		PushIndent("\t");

		foreach (string objectName in objectNames)
		{
			if (!string.IsNullOrEmpty(objectName)) {
				WriteLine("/// <summary>");
				WriteLine("/// " + objectType + " [" + schemaName + "].[" + objectName + "]");
				WriteLine("/// </summary>");
				WriteLine("public const string " + FormatName(objectName, schemaName) + " = \"" + objectName + "\";");
            }
		}

		PopIndent();
		WriteLine("}"); // end ObjectNames
		WriteLine("");

		WriteLine("/// <summary>");
		WriteLine("/// " + objectType + "s in [" + schemaName + "] schema.");
		WriteLine("/// </summary>");
		WriteLine("public static class " + objectType + "s");
		WriteLine("{");
		PushIndent("\t");

		foreach (string objectName in objectNames)
		{
			if (!string.IsNullOrEmpty(FormatName(objectName, schemaName))) 
			{
				WriteLine("/// <summary>");
				WriteLine("/// " + objectType + " [" + schemaName + "].[" + objectName + "]");
				WriteLine("/// </summary>");
				WriteLine("public static class " + FormatName(objectName, schemaName));
				WriteLine("{");
				PushIndent("\t");
		
				var names = (from r in metaData.Rows.OfType<DataRow>()
							 where r["SchemaName"].ToString() == schemaName && r["ObjectName"].ToString() == objectName
							 select r["Name"].ToString()).Distinct();

				foreach (string name in names)
				{
					if (!string.IsNullOrEmpty(name)) 
					{
						if (objectType == "Table") 
						{
							ICollection<string> columnData = new List<string>();
							
							var data = (from r in metaData.Rows.OfType<DataRow>()
										where r["SchemaName"].ToString() == schemaName && r["ObjectName"].ToString() == objectName && r["Name"].ToString() == name
										select new { IsNullable = (r["IsNullable"].ToString() == "YES"), Type = r["Type"].ToString(), Length = r["Length"].ToString(), IsPK = (r["PK"].ToString() == "PRIMARY KEY") }).FirstOrDefault();
							
							if (data.IsPK) 
							{
								columnData.Add("PK");
							}

							columnData.Add(data.Type + (string.IsNullOrEmpty(data.Length) ? string.Empty : "(" + (data.Length == "-1" ? "max" : data.Length) +")"));
							columnData.Add(data.IsNullable ? "NULL" : "NOT NULL");

							WriteLine("/// <summary>");
							WriteLine("/// Column " + name + "(" + string.Join(", ", columnData.ToArray())+ ")");
							WriteLine("/// </summary>");
						}
						else 
						{
							WriteLine("/// <summary>");
							WriteLine("/// [" + schemaName + "].[" + objectName + "].[" + name + "]");
							WriteLine("/// </summary>");
						}
						WriteLine("public const string " + FormatName(name, objectName) + " = \"" + name + "\";");
                    }
				}
			
				PopIndent();
				WriteLine("}");
				WriteLine("");
            }
		}	

		PopIndent();
		WriteLine("}"); // End Objects
		WriteLine("");
	}
}

string FormatName(string name, string enclosingType)
{
	string trimChars = "#\'/-+ ";

    foreach (char ch in trimChars.ToCharArray())
    {
		 name = name.Replace(ch.ToString(), string.Empty);
    }
	
	if (name == enclosingType) {
		name = name + "_";
	}

	return name;
}

string GetConfigFile()
{
    IServiceProvider _ServiceProvider = (IServiceProvider)Host;
    EnvDTE.DTE dte = (EnvDTE.DTE)_ServiceProvider.GetService(typeof(EnvDTE.DTE));
    Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
    EnvDTE.Project project = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
	System.IO.FileInfo fileInfo = new System.IO.FileInfo(project.FullName);

	foreach (EnvDTE.ProjectItem item in project.ProjectItems)
	{
		if (item.Name.Equals("App.config", StringComparison.InvariantCultureIgnoreCase) 
	     || item.Name.Equals("Web.config", StringComparison.InvariantCultureIgnoreCase)) 
		{
			return fileInfo.Directory.FullName + "\\" + item.Name;
        }
	}

	return String.Empty;
}

string GetDatabaseName(string connectionString) 
{
	string[] parts = connectionString.Split(';');
	string database = parts.Where(p => p.Trim().StartsWith("Initial Catalog") || p.Trim().StartsWith("Database")).FirstOrDefault();
	return database.Split('=')[1].Trim();
}
#>